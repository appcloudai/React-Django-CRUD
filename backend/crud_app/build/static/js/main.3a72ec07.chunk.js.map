{"version":3,"sources":["components/CRUD.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["CRUD","useState","data","setData","fetch","setFetch","id","title","item","setItem","checkForUpdate","setCheckForUpdate","useEffect","a","axios","get","response","console","error","fetchData","handleSubmit","post","resp","log","handleEdit","put","handleDelete","delete","className","onSubmit","event","type","onChange","target","value","handlechange","placeholder","icon","faPaperPlane","map","key","onClick","Edit","faEdit","faTrash","Header","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"oTAuHeA,MAjHf,WAEE,MAAqBC,mBAAS,IAA9B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAuBF,oBAAS,GAAhC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAqBJ,mBAAS,CAACK,GAAG,KAAKC,MAAM,KAA7C,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAyCR,oBAAS,GAAlD,mBAAOS,EAAP,KAAsBC,EAAtB,KAEAC,qBAAU,YACO,uCAAG,8BAAAC,EAAA,+EAEiBC,IAAMC,IAAI,2CAF3B,gBAEDC,EAFC,EAEPd,KACPC,EAAQa,GAHM,gDAKdC,QAAQC,MAAM,SALA,yDAAH,qDAQfC,KACC,CAACf,IAGJ,IAQOgB,EAAY,uCAAG,4BAAAP,EAAA,+EAEOC,IAAMO,KAAK,2CAA2Cb,GAF7D,OAENc,EAFM,OAGZjB,EAASD,GACTa,QAAQM,IAAID,EAAKpB,MAJL,gDAOZe,QAAQM,IAAI,SAPA,yDAAH,qDAiBXC,EAAU,uCAAG,4BAAAX,EAAA,+EAEQC,IAAMW,IAAN,uDAA0DjB,EAAKF,GAA/D,KACnB,CACIC,MAAMC,EAAKD,QAJJ,OAELe,EAFK,OAMXjB,EAASD,GACTO,GAAkB,GAClBM,QAAQM,IAAID,EAAKpB,MARN,gDAUXe,QAAQC,MAAM,SAVH,yDAAH,qDAcVQ,EAAY,uCAAG,WAAMlB,GAAN,eAAAK,EAAA,+EAGMC,IAAMa,OAAN,uDAA6DnB,EAAKF,GAAlE,MAHN,OAGPgB,EAHO,OAIbjB,GAAUD,GACVa,QAAQM,IAAID,EAAKpB,MALJ,gDASbe,QAAQM,IAAI,SATC,yDAAH,sDAalB,OAEI,yBAAKK,UAAU,kBACX,yBAAKA,UAAU,eACX,0BAAMC,SAAU,SAAAC,GAAK,OAAGpB,EAAgBc,EAAWM,GAAOV,EAAaU,KACnE,yBAAKF,UAAU,gBACX,2BACIG,KAAK,OACLH,UAAU,kBACVI,SAAU,SAAAF,GAAK,OA7DtB,SAACA,GAClBrB,EAAQ,2BAAID,GAAL,IAAWD,MAAMuB,EAAMG,OAAOC,SA4DIC,CAAaL,IAC9BI,MAAO1B,EAAKD,MACZ6B,YAAY,cAEhB,4BACIR,UAAU,gBACVG,KAAK,SACLG,MAAM,OACN,kBAAC,IAAD,CAAiBG,KAAMC,UAMtCpC,EAAKqC,KAAI,SAAA/B,GAAI,OACV,yBAAKgC,IAAKhC,EAAKF,GAAIsB,UAAU,aACzB,yBAAKA,UAAU,kBACVpB,EAAKD,OAEV,4BAAQkC,QAAS,kBA7DtB,SAACjC,GACRG,GAAkB,GAClBN,EAASD,GACTK,EAAQD,GA0D0BkC,CAAKlC,IACvBoB,UAAU,sBACV,kBAAC,IAAD,CAAiBS,KAAMM,OAE3B,4BAAQF,QAAS,kBAAKf,EAAalB,IAC/BoB,UAAU,wBACV,kBAAC,IAAD,CAAiBS,KAAMO,aC1FhCC,MApBf,WAEI,OAEI,gCACC,yBAAKjB,UAAU,oBAER,yBAAKA,UAAU,eACX,uBAAGkB,KAAK,KAAR,kBAKJ,yBAAKlB,UAAU,eAAf,yCCMDmB,MAXf,WAEA,OAEI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCJYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7C,GACLD,QAAQC,MAAMA,EAAM8C,c","file":"static/js/main.3a72ec07.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\nimport './main.css';\nimport axios from 'axios'\nimport { faEdit,faTrash, faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction CRUD(){\n\n  const [data,setData]=useState([])\n  const [fetch,setFetch]=useState(false)\n  const [item,setItem]=useState({id:null,title:\"\"})\n  const [checkForUpdate,setCheckForUpdate]=useState(false)\n\n  useEffect(() => {\n    const fetchData = async () =>{\n      try {\n        const {data: response} = await axios.get('http://127.0.0.1:8000/app/crud_get_post')\n        setData(response);\n      } catch (error) {\n        console.error(\"error\");\n      }\n    }\n    fetchData();\n  }, [fetch]);\n\n\n  const handlechange=(event)=>{\n    setItem({...item, title:event.target.value, })\n    }\n\n   const handleAlert=()=>{\n        alert(\"HeyðŸ‘‹ \\n\\n Publishing is disabled on this server! \\n ... to test this feature please download the source code and test it on a local machine. \\n\\n SourceCode:\\n www.github.com/appcloudai \\n\\n ðŸ˜ƒ If you like it please consider giving us a star on github ðŸ˜ƒ \\n Thanks\")\n      }\n\n   const handleSubmit = async () => {\n        try {\n            const resp = await axios.post('http://127.0.0.1:8000/app/crud_get_post/',item)\n            setFetch(fetch)\n            console.log(resp.data)\n        } \n        catch (err) {\n            console.log(\"error\")\n        }\n    }  \n  \n    const Edit=(item)=>{\n        setCheckForUpdate(true)\n        setFetch(fetch)\n        setItem(item)   \n    }  \n    \n    const handleEdit = async () => {\n        try {\n            const resp = await axios.put(`http://127.0.0.1:8000/app/crud_update_delete/${item.id}/`,\n            {\n                title:item.title,     \n            })\n            setFetch(fetch)\n            setCheckForUpdate(false)\n            console.log(resp.data)\n        } catch (err) {\n            console.error(\"error\")\n        }\n    }\n\n    const handleDelete = async item => {\n\n        try {\n            const resp = await axios.delete(`http://127.0.0.1:8000/app/crud_update_delete/${item.id}/`)\n            setFetch(!fetch)  \n            console.log(resp.data);\n             \n        }   \n        catch (err) {\n            console.log(\"error\")\n        }\n    }\n\n    return(\n        \n        <div className=\"crud-container\">\n            <div className=\"crud-header\">\n                <form onSubmit={event=>(checkForUpdate)?handleEdit(event):handleSubmit(event) }>\n                    <div className=\"crud-wrapper\">   \n                        <input \n                            type=\"text\" \n                            className=\"crud-form-input\" \n                            onChange={event=>handlechange(event)} \n                            value={item.title} \n                            placeholder=\"add item \" \n                        />\n                        <button \n                            className=\"submit-button\" \n                            type=\"submit\" \n                            value=\"Add\">\n                            <FontAwesomeIcon icon={faPaperPlane} />\n                        </button> \n                     </div>\n                </form>   \n            </div>\n              \n            {data.map(item => ( \n                <div key={item.id} className=\"crud-list\">  \n                    <div className=\"crud-list-item\"> \n                        {item.title}\n                    </div>\n                    <button onClick={()=> Edit(item)} \n                        className=\"button edit-button\">\n                        <FontAwesomeIcon icon={faEdit} />\n                    </button>         \n                    <button onClick={()=> handleDelete(item)} \n                        className=\"button delete-button\">\n                        <FontAwesomeIcon icon={faTrash} />\n                     </button>    \n                </div>\n            ))}\n        </div>\n    )\n}\nexport default CRUD\n       \n ","import React from 'react'\nimport './main.css'\nfunction Header(){\n    \n    return (\n\n        <header> \n         <div className=\"header_container\">\n             \n                <div className=\"Navbar_logo\">\n                    <a href=\"/\">\n                        App Cloud AI  \n                    </a>\n                </div>\n                </div>\n                <div className='header_text'>CRUD App made with React and Django</div>\n        </header>\n        \n        \n    )\n}\n\nexport default Header\n","import React from 'react'\nimport CRUD from './components/CRUD'\nimport Header from './components/Header'\n\n/*\n    //CRUD App made with React and Django\n    //For more information, please visit https://github.com/appcloudai\n*/\n\n\nfunction App(){\n\nreturn(\n\n    <div>\n        <Header/> \n        <CRUD/>  \n    </div>\n\n    )\n}\nexport default App\n       \n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}