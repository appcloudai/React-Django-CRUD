{"ast":null,"code":"var _jsxFileName = \"/Users/rawsht/Downloads/React-Django-To-Do-App-master/frontend/src/Todo.js\";\nimport React, { useState, useEffect } from 'react';\nimport { API } from './API';\nimport { API_Post } from './API_Post';\nimport './App.css';\nimport axios from 'axios';\nimport { faEdit, faTrash, faCheck, faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction Todo() {\n  /*\n      //function to  handle  creating tasks\n      //function to handle updating tasks\n      //function to handle completed tasks\n      //function to handle deleting tasks\n  \n      const initialTask={\n          id:null,\n          title:\"\",\n          is_done: false\n      }\n      const [tasks,setTasks]=useState([])\n      const [task,setTask]=useState(initialTask)\n      const [updateOrCreate,setUpdateOrCreate]=useState(false)\n      const [fetch,setFetch]=useState(false)\n  \n      const handlechange=(e)=>{\n          setTask({...task,\n                  title:e.target.value,\n                  \n               })\n            \n       }\n   \n       const handleSubmit=(e)=>{\n        e.preventDefault()\n        const url =  (`http://127.0.0.1:8000/api/task-create/`)\n        API_Post(url,task)    \n        setTask(initialTask)\n        setFetch(!fetch)\n   \n       }\n       \n       \n      const url =  (`http://127.0.0.1:8000/api/task-list/`)\n      let data = API(url)\n      let content = null\n  \n  \n      const handleToUpdate=(task)=>{\n          setTask(task)\n          setUpdateOrCreate(true)\n      }\n  \n      const handleUpdate=(e)=>{\n          e.preventDefault()\n           console.log(task)\n           const url =  ('http://127.0.0.1:8000/api/task-update/'+task.id)\n           API_Post(url,{title:task.title, is_done:task.is_done}) \n           setUpdateOrCreate(false)\n           setTask(initialTask)\n           setFetch(!fetch)\n  \n      }\n  \n      const handleDelete=(task)=>{\n          const url =  (`http://127.0.0.1:8000/api/task-delete/`)\n          API_Post(url,task)  \n          setFetch(!fetch)\n      }\n      \n      const handleComplete=(task)=>{\n          const url =  (`http://127.0.0.1:8000/api/task-update/`)\n          API_Post(url,{title:task.title, is_done:true}) \n          setFetch(!fetch)\n      }\n  */\n  const initialTask = {\n    id: null,\n    title: \"\",\n    is_done: false\n  };\n  const [tasks, setTasks] = useState([]);\n  const [task, setTask] = useState(initialTask);\n  const [updateOrCreate, setUpdateOrCreate] = useState(false);\n  const [fetch, setFetch] = useState(false);\n\n  const done = task => {\n    return task.completed = !task.completed;\n  };\n\n  useEffect(() => {\n    axios.get('http://127.0.0.1:8000/api/task-list/').then(response => {\n      setTasks(response.data);\n      console.log('fetched data ...');\n    }).catch(console.log(\"error\"));\n  }, [fetch]);\n\n  const handlechange = e => {\n    setTask({ ...task,\n      title: e.target.value\n    });\n    console.log('handle change:' + task);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    axios.post('http://127.0.0.1:8000/api/task-create/', task, {\n      method: 'DELETE',\n      headers: {\n        'Content-type': 'application/json'\n      }\n    });\n    setTask(initialTask);\n    setFetch(!fetch);\n  };\n\n  const handleToUpdate = task => {\n    setTask(task);\n    setUpdateOrCreate(true);\n  };\n\n  const handleUpdate = e => {\n    e.preventDefault();\n    console.log(task);\n    axios.post('http://127.0.0.1:8000/api/task-update/' + task.id, {\n      title: task.title,\n      is_done: task.is_done\n    });\n    setUpdateOrCreate(false);\n    setTask(initialTask);\n    setFetch(!fetch);\n  };\n\n  const handleDelete = task => {\n    axios.delete(`http://127.0.0.1:8000/api/task-delete/${task.id}/`, {\n      method: 'DELETE',\n      headers: {\n        'Content-type': 'application/json'\n      }\n    }).then(response => {\n      setFetch(task);\n    });\n  };\n\n  const handleComplete = task => {\n    axios.post('http://127.0.0.1:8000/api/task-update/' + task.id, {\n      title: task.title,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      task.completed = !task.completed;\n      setFetch(task);\n    }); //  task.completed = !task.completed\n\n    setFetch(task);\n  };\n  /*\n    const handleComplete=(task)=>{\n      \n      axios.put(`http://127.0.0.1:8000/api/task-update/${task.id}/`, {\n        method:'PUT',\n        headers:{\n          'Content-type':'application/json',\n          \n        },\n      }).then((response) =>{\n          task.completed = !task.completed\n          setFetch(task)\n      })\n    }\n   \n   \n  \n    const handleComplete=(task)=>{\n     \n          // PUT request using axios inside useEffect React hook\n         \n          axios.put(`http://127.0.0.1:8000/api/task-update/${task.id}/`, \n          \n          {\n              title:task.title,\n              is_done:true,\n              method:'POST',\n              headers:{\n                'Content-type':'application/json',\n                \n              }}\n          )\n          \n              .then(response => setFetch(response.data.task));\n             \n                  task.completed = !task.completed\n              \n      // empty dependency array means this effect will only run once (like componentDidMount in classes)\n     \n      \n     \n      \n     \n      \n     // setFetch(task)\n  }\n   */\n\n  /*\n  const handleComplete=(task)=>{\n  \n      task.completed = !task.completed\n      \n      axios.post('http://127.0.0.1:8000/api/task-update/'+task.id, {\n          method:'POST',\n          headers:{\n            'Content-type':'application/json',\n            \n          },\n     \n          body:JSON.stringify({'completed': task.completed, 'title':task.title})\n        }) \n          setFetch(!fetch)\n       \n    }\n  */\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"task-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"form-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    id: \"form\",\n    onSubmit: e => updateOrCreate ? handleUpdate(e) : handleSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 22\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      flex: 6\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 26\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control mr-1\",\n    onChange: e => handlechange(e),\n    value: task.title,\n    id: \"titleInput\",\n    placeholder: \"add task...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 26\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"submit\",\n    className: \"btn btn-warning\",\n    type: \"submit\",\n    value: \"Add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 26\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faPaperPlane,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 30\n    }\n  })))))), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"list-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 18\n    }\n  }, tasks.map((task, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: \"task-wrapper flex-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      flex: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 31\n    }\n  }, task.title), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      flex: 7\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 23\n    }\n  }, task.completed == false ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"not_completed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 38\n    }\n  }, task.title) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"xcompleted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 38\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"completed-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 66\n    }\n  }, task.title), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"completed_checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 116\n    }\n  }, \"\\u2713\"))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 30\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleComplete(task),\n    className: \"btn buttonex buttone\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 30\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faCheck,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 109\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 30\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleToUpdate(task),\n    className: \"btn buttonex buttone\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 34\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faEdit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 113\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 30\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleDelete(task),\n    className: \"btn buttonex buttonr\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 34\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faTrash,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 110\n    }\n  }))))))));\n}\n\nexport default Todo;\n/*   \n<div className=\"container\">\n<div id=\"task-container\">\n<div  id=\"form-wrapper\">\n<form id=\"form\" onSubmit={e=>(updateOrCreate)?handleUpdate(e):handleSubmit(e) }>\n           <div className=\"flex-wrapper\">\n               <div style={{flex: 6}}>\n               <input type=\"text\" className=\"form-control mr-1\" onChange={e=>handlechange(e)} value={task.title} id=\"titleInput\" placeholder=\"add task...\"/>\n               <button id=\"submit\" className=\"btn btn-warning\" type=\"submit\" value=\"Add\">\n                   <FontAwesomeIcon icon={faPaperPlane} /></button>\n                </div>                \n           </div>\n           </form>    \n       </div>\n        <div  id=\"list-wrapper\"> \n       {tasks.map((task,index)=>( \n            <div key={index} className=\"task-wrapper flex-wrapper\">\n                    <div style={{flex:20}}>{task.title}\n    \n    </div>\n             <div style={{flex:7}}>\n            {task.completed == false ? (\n                           <span className='not_completed'>{task.title}</span>\n                          ) : (\n                            <div className=\"xcompleted\"><div className='completed-text'>{task.title}</div><span className='completed_checkbox'>✓</span></div>\n                         )}\n                      </div>\n                    \n                    <div style={{flex:1}}>\n                   <button className=\"btn btn-default mr-1\" onClick={()=>handleComplete(task)}><FontAwesomeIcon icon={faCheck} /></button>\n                   \n                 \n                   </div>\n                       <div style={{flex:1}}>\n                       <button onClick={() => handleToUpdate(task)}  className=\"btn buttonex buttone\"><FontAwesomeIcon icon={faEdit} /></button>\n                   </div>\n                      <div style={{flex:1}}>\n                       <button onClick={() => handleDelete(task)} className=\"btn buttonex buttonr\"><FontAwesomeIcon icon={faTrash} /></button>\n                   </div>\n                 \n                   </div>\n                ))}\n </div>\n </div>\n</div>\n)\n}\n*/","map":{"version":3,"sources":["/Users/rawsht/Downloads/React-Django-To-Do-App-master/frontend/src/Todo.js"],"names":["React","useState","useEffect","API","API_Post","axios","faEdit","faTrash","faCheck","faPaperPlane","FontAwesomeIcon","Todo","initialTask","id","title","is_done","tasks","setTasks","task","setTask","updateOrCreate","setUpdateOrCreate","fetch","setFetch","done","completed","get","then","response","data","console","log","catch","handlechange","e","target","value","handleSubmit","preventDefault","post","method","headers","handleToUpdate","handleUpdate","handleDelete","delete","handleComplete","flex","map","index"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react'\nimport { API } from './API'\nimport { API_Post } from './API_Post'\nimport './App.css';\nimport axios from 'axios'\nimport { faEdit,faTrash,faCheck, faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nfunction Todo(){\n\n/*\n    //function to  handle  creating tasks\n    //function to handle updating tasks\n    //function to handle completed tasks\n    //function to handle deleting tasks\n\n    const initialTask={\n        id:null,\n        title:\"\",\n        is_done: false\n    }\n    const [tasks,setTasks]=useState([])\n    const [task,setTask]=useState(initialTask)\n    const [updateOrCreate,setUpdateOrCreate]=useState(false)\n    const [fetch,setFetch]=useState(false)\n\n    const handlechange=(e)=>{\n        setTask({...task,\n                title:e.target.value,\n                \n             })\n          \n     }\n \n     const handleSubmit=(e)=>{\n      e.preventDefault()\n      const url =  (`http://127.0.0.1:8000/api/task-create/`)\n      API_Post(url,task)    \n      setTask(initialTask)\n      setFetch(!fetch)\n \n     }\n     \n     \n    const url =  (`http://127.0.0.1:8000/api/task-list/`)\n    let data = API(url)\n    let content = null\n\n\n    const handleToUpdate=(task)=>{\n        setTask(task)\n        setUpdateOrCreate(true)\n    }\n\n    const handleUpdate=(e)=>{\n        e.preventDefault()\n         console.log(task)\n         const url =  ('http://127.0.0.1:8000/api/task-update/'+task.id)\n         API_Post(url,{title:task.title, is_done:task.is_done}) \n         setUpdateOrCreate(false)\n         setTask(initialTask)\n         setFetch(!fetch)\n\n    }\n\n    const handleDelete=(task)=>{\n        const url =  (`http://127.0.0.1:8000/api/task-delete/`)\n        API_Post(url,task)  \n        setFetch(!fetch)\n    }\n    \n    const handleComplete=(task)=>{\n        const url =  (`http://127.0.0.1:8000/api/task-update/`)\n        API_Post(url,{title:task.title, is_done:true}) \n        setFetch(!fetch)\n    }\n*/\n\nconst initialTask={\n    id:null,\n    title:\"\",\n    is_done: false\n}\nconst [tasks,setTasks]=useState([])\nconst [task,setTask]=useState(initialTask)\nconst [updateOrCreate,setUpdateOrCreate]=useState(false)\nconst [fetch,setFetch]=useState(false)\nconst done =(task)=>{\n    return ( task.completed = !task.completed\n    )\n}\n \nuseEffect(() => {\n    axios.get('http://127.0.0.1:8000/api/task-list/')\n    .then(\n        response=>{\n            \n            setTasks(response.data)\n            console.log('fetched data ...')\n        }\n    )\n    .catch(\n        console.log(\"error\")\n\n    )\n\n},[fetch])\n   \n  \nconst handlechange=(e)=>{\n   setTask({...task,\n           title:e.target.value,\n           \n        })\n    console.log('handle change:'+ task)\n}\n\nconst handleSubmit=(e)=>{\n e.preventDefault()\n axios.post('http://127.0.0.1:8000/api/task-create/',task, {\n    method:'DELETE',\n    headers:{\n      'Content-type':'application/json',\n      \n    }})\nsetTask(initialTask)\nsetFetch(!fetch)\n\n}\n \nconst handleToUpdate=(task)=>{\n    setTask(task)\n    setUpdateOrCreate(true)\n}\n\nconst handleUpdate=(e)=>{\n    e.preventDefault()\n     console.log(task)\n     axios.post('http://127.0.0.1:8000/api/task-update/'+task.id,\n     {\n        title:task.title,\n        is_done:task.is_done\n     });\n     setUpdateOrCreate(false)\n     setTask(initialTask)\n     setFetch(!fetch)\n\n}\nconst handleDelete=(task)=>{\n    \n    axios.delete(`http://127.0.0.1:8000/api/task-delete/${task.id}/`, {\n      method:'DELETE',\n      headers:{\n        'Content-type':'application/json',\n        \n      },\n    }).then((response) =>{\n\n        setFetch(task)\n    })\n  }\n  const handleComplete=(task)=>{\n    axios.post('http://127.0.0.1:8000/api/task-update/'+task.id,\n    {\n        title:task.title,\n        headers: {\n            \"Content-Type\": \"application/json\"\n          }\n    })\n    .then(response => {\n        task.completed = !task.completed\n        \n       \n        setFetch(task)\n       \n      })\n  //  task.completed = !task.completed\n    setFetch(task)\n}\n/*\n  const handleComplete=(task)=>{\n    \n    axios.put(`http://127.0.0.1:8000/api/task-update/${task.id}/`, {\n      method:'PUT',\n      headers:{\n        'Content-type':'application/json',\n        \n      },\n    }).then((response) =>{\n        task.completed = !task.completed\n        setFetch(task)\n    })\n  }\n \n \n\n  const handleComplete=(task)=>{\n   \n        // PUT request using axios inside useEffect React hook\n       \n        axios.put(`http://127.0.0.1:8000/api/task-update/${task.id}/`, \n        \n        {\n            title:task.title,\n            is_done:true,\n            method:'POST',\n            headers:{\n              'Content-type':'application/json',\n              \n            }}\n        )\n        \n            .then(response => setFetch(response.data.task));\n           \n                task.completed = !task.completed\n            \n    // empty dependency array means this effect will only run once (like componentDidMount in classes)\n   \n    \n   \n    \n   \n    \n   // setFetch(task)\n}\n */\n/*\nconst handleComplete=(task)=>{\n\n    task.completed = !task.completed\n    \n    axios.post('http://127.0.0.1:8000/api/task-update/'+task.id, {\n        method:'POST',\n        headers:{\n          'Content-type':'application/json',\n          \n        },\n   \n        body:JSON.stringify({'completed': task.completed, 'title':task.title})\n      }) \n        setFetch(!fetch)\n     \n  }\n*/\n   \n    return(\n \n        <div className=\"container\">\n        <div id=\"task-container\">\n        <div  id=\"form-wrapper\">\n \n        <form id=\"form\" onSubmit={e=>(updateOrCreate)?handleUpdate(e):handleSubmit(e) }>\n                     <div className=\"flex-wrapper\">\n                         <div style={{flex: 6}}>\n                         <input type=\"text\" className=\"form-control mr-1\" onChange={e=>handlechange(e)} value={task.title} id=\"titleInput\" placeholder=\"add task...\"/>\n                         <button id=\"submit\" className=\"btn btn-warning\" type=\"submit\" value=\"Add\">\n                             <FontAwesomeIcon icon={faPaperPlane} /></button>\n        \n                  </div>                \n                     </div>\n                     </form>    \n                 </div>\n \n                 <div  id=\"list-wrapper\"> \n                 {tasks.map((task,index)=>( \n                      <div key={index} className=\"task-wrapper flex-wrapper\">\n                              <div style={{flex:20}}>{task.title}\n              \n              </div>\n \n                      <div style={{flex:7}}>\n                      {task.completed == false ? (\n                                     <span className='not_completed'>{task.title}</span>\n \n                                   ) : (\n \n                                     <div className=\"xcompleted\"><div className='completed-text'>{task.title}</div><span className='completed_checkbox'>✓</span></div>\n                                   )}\n   \n                             </div>\n \n                             \n \n                             <div style={{flex:1}}>\n                             <button onClick={() => handleComplete(task)}  className=\"btn buttonex buttone\"><FontAwesomeIcon icon={faCheck} /></button>\n                            \n                             \n                           \n                             </div>\n  \n \n \n                             <div style={{flex:1}}>\n                                 <button onClick={() => handleToUpdate(task)}  className=\"btn buttonex buttone\"><FontAwesomeIcon icon={faEdit} /></button>\n                             </div>\n \n \n \n                             <div style={{flex:1}}>\n                                 <button onClick={() => handleDelete(task)} className=\"btn buttonex buttonr\"><FontAwesomeIcon icon={faTrash} /></button>\n                             </div>\n                           \n                             </div>\n                          ))}\n           </div>\n           </div>\n         </div>\n \n )\n }\nexport default Todo\n         /*   \n     <div className=\"container\">\n       <div id=\"task-container\">\n       <div  id=\"form-wrapper\">\n\n       <form id=\"form\" onSubmit={e=>(updateOrCreate)?handleUpdate(e):handleSubmit(e) }>\n                    <div className=\"flex-wrapper\">\n                        <div style={{flex: 6}}>\n                        <input type=\"text\" className=\"form-control mr-1\" onChange={e=>handlechange(e)} value={task.title} id=\"titleInput\" placeholder=\"add task...\"/>\n                        <button id=\"submit\" className=\"btn btn-warning\" type=\"submit\" value=\"Add\">\n                            <FontAwesomeIcon icon={faPaperPlane} /></button>\n       \n                 </div>                \n                    </div>\n                    </form>    \n                </div>\n\n                <div  id=\"list-wrapper\"> \n                {tasks.map((task,index)=>( \n                     <div key={index} className=\"task-wrapper flex-wrapper\">\n                             <div style={{flex:20}}>{task.title}\n             \n             </div>\n\n                     <div style={{flex:7}}>\n                     {task.completed == false ? (\n                                    <span className='not_completed'>{task.title}</span>\n\n                                  ) : (\n\n                                    <div className=\"xcompleted\"><div className='completed-text'>{task.title}</div><span className='completed_checkbox'>✓</span></div>\n                                  )}\n  \n                            </div>\n\n                            \n\n                            <div style={{flex:1}}>\n                            <button className=\"btn btn-default mr-1\" onClick={()=>handleComplete(task)}><FontAwesomeIcon icon={faCheck} /></button>\n                            \n                          \n                            </div>\n \n\n\n                            <div style={{flex:1}}>\n                                <button onClick={() => handleToUpdate(task)}  className=\"btn buttonex buttone\"><FontAwesomeIcon icon={faEdit} /></button>\n                            </div>\n\n\n\n                            <div style={{flex:1}}>\n                                <button onClick={() => handleDelete(task)} className=\"btn buttonex buttonr\"><FontAwesomeIcon icon={faTrash} /></button>\n                            </div>\n                          \n                            </div>\n                         ))}\n          </div>\n          </div>\n        </div>\n\n)\n}\n\n       */\n"]},"metadata":{},"sourceType":"module"}