{"ast":null,"code":"var _jsxFileName = \"/Users/rawsht/Downloads/React-Django-To-Do-App-master/frontend/src/Todo.js\";\nimport React, { useState, useEffect } from 'react';\nimport { API } from './API';\nimport { API_Post } from './API_Post';\nimport './App.css';\nimport axios from 'axios';\nimport { faEdit, faTrash, faCheck, faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction Todo() {\n  /*\n      //function to  handle  creating tasks\n      //function to handle updating tasks\n      //function to handle completed tasks\n      //function to handle deleting tasks\n  \n      const initialTask={\n          id:null,\n          title:\"\",\n          is_done: false\n      }\n      const [tasks,setTasks]=useState([])\n      const [task,setTask]=useState(initialTask)\n      const [updateOrCreate,setUpdateOrCreate]=useState(false)\n      const [fetch,setFetch]=useState(false)\n  \n      const handlechange=(e)=>{\n          setTask({...task,\n                  title:e.target.value,\n                  \n               })\n            \n       }\n   \n       const handleSubmit=(e)=>{\n        e.preventDefault()\n        const url =  (`http://127.0.0.1:8000/api/task-create/`)\n        API_Post(url,task)    \n        setTask(initialTask)\n        setFetch(!fetch)\n   \n       }\n       \n       \n      const url =  (`http://127.0.0.1:8000/api/task-list/`)\n      let data = API(url)\n      let content = null\n  \n  \n      const handleToUpdate=(task)=>{\n          setTask(task)\n          setUpdateOrCreate(true)\n      }\n  \n      const handleUpdate=(e)=>{\n          e.preventDefault()\n           console.log(task)\n           const url =  ('http://127.0.0.1:8000/api/task-update/'+task.id)\n           API_Post(url,{title:task.title, is_done:task.is_done}) \n           setUpdateOrCreate(false)\n           setTask(initialTask)\n           setFetch(!fetch)\n  \n      }\n  \n      const handleDelete=(task)=>{\n          const url =  (`http://127.0.0.1:8000/api/task-delete/`)\n          API_Post(url,task)  \n          setFetch(!fetch)\n      }\n      \n      const handleComplete=(task)=>{\n          const url =  (`http://127.0.0.1:8000/api/task-update/`)\n          API_Post(url,{title:task.title, is_done:true}) \n          setFetch(!fetch)\n      }\n  */\n  const initialTask = {\n    id: null,\n    title: \"\",\n    is_done: false\n  };\n  const [tasks, setTasks] = useState([]);\n  const [task, setTask] = useState(initialTask);\n  const [updateOrCreate, setUpdateOrCreate] = useState(false);\n  const [fetch, setFetch] = useState(false);\n\n  const done = task => {\n    return task.is_done ? \"fa fa-check-circle fa-2x text-success\" : \"fa fa-check-circle fa-2x\";\n  };\n\n  useEffect(() => {\n    axios.get('http://127.0.0.1:8000/api/task-list/').then(response => {\n      setTasks(response.data);\n      console.log('fetched data ...');\n    }).catch(console.log(\"error\"));\n  }, [fetch]);\n\n  const handlechange = e => {\n    setTask({ ...task,\n      title: e.target.value\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    axios.post('http://127.0.0.1:8000/api/task-create/', task, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      }\n    });\n    setTask(initialTask);\n    setFetch(!fetch);\n  };\n\n  const handleToUpdate = task => {\n    setUpdateOrCreate(true);\n    setTask(task);\n  };\n\n  const handleUpdate = e => {\n    e.preventDefault();\n    axios.post(`http://127.0.0.1:8000/api/task-update/${task.id}/`, {\n      title: task.title,\n      is_done: task.is_done\n    });\n    setUpdateOrCreate(false);\n    setTask(initialTask);\n    setFetch(!fetch);\n  };\n\n  const strikeUnstrike = task => {\n    task.completed = !task.completed;\n    var url = `http://127.0.0.1:8000/api/task-update/${task.id}/`; //axios.get(`http://127.0.0.1:8000/api/task-update/${task.id}/`,{\n\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        'completed': task.completed,\n        'title': task.title\n      })\n    }).then(() => {\n      this.fetchTasks();\n    });\n    console.log('TASK:', task.completed);\n  };\n\n  const handleDelete = task => {\n    axios.delete(`http://127.0.0.1:8000/api/task-delete/${task.id}/`, {\n      method: 'DELETE',\n      headers: {\n        'Content-type': 'application/json'\n      }\n    }).then(response => {\n      setFetch(task);\n    });\n  };\n\n  const handleComplete = task => {\n    axios.post(`http://127.0.0.1:8000/api/task-update/${task.id}/`, {\n      title: task.title,\n      is_done: true,\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      }\n    }).then(response => {\n      setFetch(task);\n    });\n  };\n\n  const xhandleUpdate = async post => {\n    //put\n    post.title = task.title;\n    await axios.get(`http://127.0.0.1:8000/api/task-update/${post.id}/`); // await http.get(`${config.apiEndpoint}/${post.id}`);\n\n    setFetch({\n      post\n    });\n  };\n\n  const xhandleComplete = task => {\n    task.completed = !task.completed;\n    axios.patch(`http://127.0.0.1:8000/api/task-update/${task.id}/`, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        'completed': task.completed,\n        'title': task.title\n      })\n    }).then(() => {\n      setFetch(task);\n    });\n  };\n  /*\n  const handleComplete=(task)=>{\n    axios.post('http://127.0.0.1:8000/api/task-update/'+task.id,\n    {\n        title:task.title,\n        headers: {\n            \"Content-Type\": \"application/json\"\n          }\n    })\n    .then(response => {\n        task.completed = !task.completed\n        \n       \n        setFetch(task)\n       \n      })\n  //  task.completed = !task.completed\n     \n  }\n    const handleComplete=(task)=>{\n    \n    axios.put(`http://127.0.0.1:8000/api/task-update/${task.id}/`, {\n      method:'PUT',\n      headers:{\n        'Content-type':'application/json',\n        \n      },\n    }).then((response) =>{\n        task.completed = !task.completed\n        setFetch(task)\n    })\n  }\n   \n   const handleComplete=(task)=>{\n   \n        // PUT request using axios inside useEffect React hook\n       \n        axios.put(`http://127.0.0.1:8000/api/task-update/${task.id}/`, \n        \n        {\n            title:task.title,\n            is_done:true,\n            method:'POST',\n            headers:{\n              'Content-type':'application/json',\n              \n            }}\n        )\n        \n            .then(response => setFetch(response.data.task));\n           \n                task.completed = !task.completed\n            \n    // empty dependency array means this effect will only run once (like componentDidMount in classes)\n   \n    \n   \n    \n   \n    \n   // setFetch(task)\n  }\n  */\n\n  /*\n  const handleComplete=(task)=>{\n  \n      task.completed = !task.completed\n      \n      axios.post('http://127.0.0.1:8000/api/task-update/'+task.id, {\n          method:'POST',\n          headers:{\n            'Content-type':'application/json',\n            \n          },\n     \n          body:JSON.stringify({'completed': task.completed, 'title':task.title})\n        }) \n          setFetch(!fetch)\n       \n    }\n  */\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"task-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"form-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form\",\n    onSubmit: e => updateOrCreate ? handleUpdate(e) : handleSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 22\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      flex: 6\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 26\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control mr-1\",\n    onChange: e => handlechange(e),\n    value: task.title,\n    id: \"titleInput\",\n    placeholder: \"add task...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 26\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 26\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"list-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 18\n    }\n  }, tasks.map((task, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: \"task-wrapper flex-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      flex: 7\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 23\n    }\n  }, task.completed == false ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"not_completed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 38\n    }\n  }, task.title) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"xcompleted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 38\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"completed-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 66\n    }\n  }, task.title), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"completed_checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 116\n    }\n  }, \"\\u2713\"))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 30\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleToUpdate(task),\n    className: \"btn buttonex buttone\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 34\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faEdit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 113\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 30\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => strikeUnstrike(task),\n    className: \"btn buttonex buttonr\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 34\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faTrash,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 112\n    }\n  }))))))));\n}\n\nexport default Todo;\n/*   \n<div className=\"container\">\n<div id=\"task-container\">\n<div  id=\"form-wrapper\">\n<form id=\"form\" onSubmit={e=>(updateOrCreate)?handleUpdate(e):handleSubmit(e) }>\n           <div className=\"flex-wrapper\">\n               <div style={{flex: 6}}>\n               <input type=\"text\" className=\"form-control mr-1\" onChange={e=>handlechange(e)} value={task.title} id=\"titleInput\" placeholder=\"add task...\"/>\n               <button id=\"submit\" className=\"btn btn-warning\" type=\"submit\" value=\"Add\">\n                   <FontAwesomeIcon icon={faPaperPlane} /></button>\n                </div>                \n           </div>\n           </form>    \n       </div>\n        <div  id=\"list-wrapper\"> \n       {tasks.map((task,index)=>( \n            <div key={index} className=\"task-wrapper flex-wrapper\">\n                    <div style={{flex:20}}>{task.title}\n    \n    </div>\n             <div style={{flex:7}}>\n            {task.completed == false ? (\n                           <span className='not_completed'>{task.title}</span>\n                          ) : (\n                            <div className=\"xcompleted\"><div className='completed-text'>{task.title}</div><span className='completed_checkbox'>✓</span></div>\n                         )}\n                      </div>\n                    \n                    <div style={{flex:1}}>\n                   <button className=\"btn btn-default mr-1\" onClick={()=>handleComplete(task)}><FontAwesomeIcon icon={faCheck} /></button>\n                   \n                 \n                   </div>\n                       <div style={{flex:1}}>\n                       <button onClick={() => handleToUpdate(task)}  className=\"btn buttonex buttone\"><FontAwesomeIcon icon={faEdit} /></button>\n                   </div>\n                      <div style={{flex:1}}>\n                       <button onClick={() => handleDelete(task)} className=\"btn buttonex buttonr\"><FontAwesomeIcon icon={faTrash} /></button>\n                   </div>\n                 \n                   </div>\n                ))}\n </div>\n </div>\n</div>\n)\n}\n*/","map":{"version":3,"sources":["/Users/rawsht/Downloads/React-Django-To-Do-App-master/frontend/src/Todo.js"],"names":["React","useState","useEffect","API","API_Post","axios","faEdit","faTrash","faCheck","faPaperPlane","FontAwesomeIcon","Todo","initialTask","id","title","is_done","tasks","setTasks","task","setTask","updateOrCreate","setUpdateOrCreate","fetch","setFetch","done","get","then","response","data","console","log","catch","handlechange","e","target","value","handleSubmit","preventDefault","post","method","headers","handleToUpdate","handleUpdate","strikeUnstrike","completed","url","body","JSON","stringify","fetchTasks","handleDelete","delete","handleComplete","xhandleUpdate","xhandleComplete","patch","flex","map","index"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react'\nimport { API } from './API'\nimport { API_Post } from './API_Post'\nimport './App.css';\nimport axios from 'axios'\nimport { faEdit,faTrash,faCheck, faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nfunction Todo(){\n\n/*\n    //function to  handle  creating tasks\n    //function to handle updating tasks\n    //function to handle completed tasks\n    //function to handle deleting tasks\n\n    const initialTask={\n        id:null,\n        title:\"\",\n        is_done: false\n    }\n    const [tasks,setTasks]=useState([])\n    const [task,setTask]=useState(initialTask)\n    const [updateOrCreate,setUpdateOrCreate]=useState(false)\n    const [fetch,setFetch]=useState(false)\n\n    const handlechange=(e)=>{\n        setTask({...task,\n                title:e.target.value,\n                \n             })\n          \n     }\n \n     const handleSubmit=(e)=>{\n      e.preventDefault()\n      const url =  (`http://127.0.0.1:8000/api/task-create/`)\n      API_Post(url,task)    \n      setTask(initialTask)\n      setFetch(!fetch)\n \n     }\n     \n     \n    const url =  (`http://127.0.0.1:8000/api/task-list/`)\n    let data = API(url)\n    let content = null\n\n\n    const handleToUpdate=(task)=>{\n        setTask(task)\n        setUpdateOrCreate(true)\n    }\n\n    const handleUpdate=(e)=>{\n        e.preventDefault()\n         console.log(task)\n         const url =  ('http://127.0.0.1:8000/api/task-update/'+task.id)\n         API_Post(url,{title:task.title, is_done:task.is_done}) \n         setUpdateOrCreate(false)\n         setTask(initialTask)\n         setFetch(!fetch)\n\n    }\n\n    const handleDelete=(task)=>{\n        const url =  (`http://127.0.0.1:8000/api/task-delete/`)\n        API_Post(url,task)  \n        setFetch(!fetch)\n    }\n    \n    const handleComplete=(task)=>{\n        const url =  (`http://127.0.0.1:8000/api/task-update/`)\n        API_Post(url,{title:task.title, is_done:true}) \n        setFetch(!fetch)\n    }\n*/\n\nconst initialTask={\n    id:null,\n    title:\"\",\n    is_done: false\n}\nconst [tasks,setTasks]=useState([])\nconst [task,setTask]=useState(initialTask)\nconst [updateOrCreate,setUpdateOrCreate]=useState(false)\nconst [fetch,setFetch]=useState(false)\nconst done =(task)=>{\n    return (task.is_done)?\"fa fa-check-circle fa-2x text-success\":\"fa fa-check-circle fa-2x\"\n}\n \nuseEffect(() => {\n    axios.get('http://127.0.0.1:8000/api/task-list/')\n    .then(\n        response=>{\n            \n            setTasks(response.data)\n            console.log('fetched data ...')\n        }\n    )\n    .catch(\n        console.log(\"error\")\n\n    )\n\n},[fetch])\n   \n  \nconst handlechange=(e)=>{\n   setTask({...task,\n           title:e.target.value,\n           \n        })\n    \n}\n\nconst handleSubmit=(e)=>{\n e.preventDefault()\n axios.post('http://127.0.0.1:8000/api/task-create/',task, {\n    method:'POST',\n    headers:{\n      'Content-type':'application/json',\n      \n    }})\nsetTask(initialTask)\nsetFetch(!fetch)\n\n}\n \nconst handleToUpdate=(task)=>{\n\n        setUpdateOrCreate(true)\n        setTask(task)\n      \n}\n\nconst handleUpdate=(e)=>{\n    e.preventDefault()\n    axios.post(`http://127.0.0.1:8000/api/task-update/${task.id}/`,\n     {\n        title:task.title,\n        is_done:task.is_done\n     });\n     setUpdateOrCreate(false)\n     setTask(initialTask)\n     setFetch(!fetch)\n\n}\n\nconst strikeUnstrike=(task)=>{\n\n    task.completed = !task.completed\n    \n      var url = `http://127.0.0.1:8000/api/task-update/${task.id}/`\n      //axios.get(`http://127.0.0.1:8000/api/task-update/${task.id}/`,{\n\n      \n     fetch(url, {\n        method:'POST',\n         headers:{\n          'Content-type':'application/json',\n          \n        },\n        body:JSON.stringify({'completed': task.completed, 'title':task.title})\n      }).then(() => {\n        this.fetchTasks()\n      })\n\n    console.log('TASK:', task.completed)\n  }\n\n\n\nconst handleDelete=(task)=>{\n    \n    axios.delete(`http://127.0.0.1:8000/api/task-delete/${task.id}/`, {\n      method:'DELETE',\n      headers:{\n        'Content-type':'application/json',\n        \n      },\n    }).then((response) =>{\n\n        setFetch(task)\n    })\n  }\n\n  const handleComplete=(task)=>{\n    \n    axios.post(`http://127.0.0.1:8000/api/task-update/${task.id}/`, {\n      title:task.title,\n      is_done:true,\n      method:'POST',\n      headers:{\n        'Content-type':'application/json',\n        \n      },\n    }).then((response) =>{\n\n        setFetch(task)\n    })\n  }\n\n  const xhandleUpdate = async (post) => {\n    //put\n    post.title = task.title;\n    await axios.get(`http://127.0.0.1:8000/api/task-update/${post.id}/`);\n   // await http.get(`${config.apiEndpoint}/${post.id}`);\n    \n   \n    setFetch({ post });\n  };\n\n  const xhandleComplete=(task)=>{\n\n    task.completed = !task.completed\n    \n   \n  axios.patch(`http://127.0.0.1:8000/api/task-update/${task.id}/`, {\n        method:'POST',\n        headers:{\n          'Content-type':'application/json',\n          \n        },\n        body:JSON.stringify({'completed': task.completed, 'title':task.title})\n      }).then(() => {\n        setFetch(task)\n      })\n \n  }\n  /*\n  const handleComplete=(task)=>{\n    axios.post('http://127.0.0.1:8000/api/task-update/'+task.id,\n    {\n        title:task.title,\n        headers: {\n            \"Content-Type\": \"application/json\"\n          }\n    })\n    .then(response => {\n        task.completed = !task.completed\n        \n       \n        setFetch(task)\n       \n      })\n  //  task.completed = !task.completed\n     \n}\n \n  const handleComplete=(task)=>{\n    \n    axios.put(`http://127.0.0.1:8000/api/task-update/${task.id}/`, {\n      method:'PUT',\n      headers:{\n        'Content-type':'application/json',\n        \n      },\n    }).then((response) =>{\n        task.completed = !task.completed\n        setFetch(task)\n    })\n  }\n \n \n\n  const handleComplete=(task)=>{\n   \n        // PUT request using axios inside useEffect React hook\n       \n        axios.put(`http://127.0.0.1:8000/api/task-update/${task.id}/`, \n        \n        {\n            title:task.title,\n            is_done:true,\n            method:'POST',\n            headers:{\n              'Content-type':'application/json',\n              \n            }}\n        )\n        \n            .then(response => setFetch(response.data.task));\n           \n                task.completed = !task.completed\n            \n    // empty dependency array means this effect will only run once (like componentDidMount in classes)\n   \n    \n   \n    \n   \n    \n   // setFetch(task)\n}\n */\n/*\nconst handleComplete=(task)=>{\n\n    task.completed = !task.completed\n    \n    axios.post('http://127.0.0.1:8000/api/task-update/'+task.id, {\n        method:'POST',\n        headers:{\n          'Content-type':'application/json',\n          \n        },\n   \n        body:JSON.stringify({'completed': task.completed, 'title':task.title})\n      }) \n        setFetch(!fetch)\n     \n  }\n*/\n   \n    return(\n       \n         \n        <div className=\"container\">\n        <div id=\"task-container\">\n        <div  id=\"form-wrapper\">\n        <form className=\"form\" onSubmit={e=>(updateOrCreate)?handleUpdate(e):handleSubmit(e) }>\n       \n                     <div className=\"flex-wrapper\">\n                         <div style={{flex: 6}}>\n                         <input type=\"text\" className=\"form-control mr-1\" onChange={e=>handlechange(e)} value={task.title} id=\"titleInput\" placeholder=\"add task...\"/>\n                         <div style={{flex: 1}}>\n               \n                          \n                          </div>\n                          \n        \n                  </div>                \n                     </div>\n                     </form>    \n                 </div>\n \n                 <div  id=\"list-wrapper\"> \n                 {tasks.map((task,index)=>( \n                      <div key={index} className=\"task-wrapper flex-wrapper\">\n                             \n \n                      <div style={{flex:7}}>\n                      {task.completed == false ? (\n                                     <span className='not_completed'>{task.title}</span>\n \n                                   ) : (\n \n                                     <div className=\"xcompleted\"><div className='completed-text'>{task.title}</div><span className='completed_checkbox'>✓</span></div>\n                                   )}\n   \n                             </div>\n \n                             \n \n                           \n  \n \n \n                             <div style={{flex:1}}>\n                                 <button onClick={() => handleToUpdate(task)}  className=\"btn buttonex buttone\"><FontAwesomeIcon icon={faEdit} /></button>\n                             </div>\n \n \n \n                             <div style={{flex:1}}>\n                                 <button onClick={() => strikeUnstrike(task)} className=\"btn buttonex buttonr\"><FontAwesomeIcon icon={faTrash} /></button>\n                             </div>\n                           \n                             </div>\n                          ))}\n           </div>\n           </div>\n         </div>\n \n )\n }\nexport default Todo\n         /*   \n     <div className=\"container\">\n       <div id=\"task-container\">\n       <div  id=\"form-wrapper\">\n\n       <form id=\"form\" onSubmit={e=>(updateOrCreate)?handleUpdate(e):handleSubmit(e) }>\n                    <div className=\"flex-wrapper\">\n                        <div style={{flex: 6}}>\n                        <input type=\"text\" className=\"form-control mr-1\" onChange={e=>handlechange(e)} value={task.title} id=\"titleInput\" placeholder=\"add task...\"/>\n                        <button id=\"submit\" className=\"btn btn-warning\" type=\"submit\" value=\"Add\">\n                            <FontAwesomeIcon icon={faPaperPlane} /></button>\n       \n                 </div>                \n                    </div>\n                    </form>    \n                </div>\n\n                <div  id=\"list-wrapper\"> \n                {tasks.map((task,index)=>( \n                     <div key={index} className=\"task-wrapper flex-wrapper\">\n                             <div style={{flex:20}}>{task.title}\n             \n             </div>\n\n                     <div style={{flex:7}}>\n                     {task.completed == false ? (\n                                    <span className='not_completed'>{task.title}</span>\n\n                                  ) : (\n\n                                    <div className=\"xcompleted\"><div className='completed-text'>{task.title}</div><span className='completed_checkbox'>✓</span></div>\n                                  )}\n  \n                            </div>\n\n                            \n\n                            <div style={{flex:1}}>\n                            <button className=\"btn btn-default mr-1\" onClick={()=>handleComplete(task)}><FontAwesomeIcon icon={faCheck} /></button>\n                            \n                          \n                            </div>\n \n\n\n                            <div style={{flex:1}}>\n                                <button onClick={() => handleToUpdate(task)}  className=\"btn buttonex buttone\"><FontAwesomeIcon icon={faEdit} /></button>\n                            </div>\n\n\n\n                            <div style={{flex:1}}>\n                                <button onClick={() => handleDelete(task)} className=\"btn buttonex buttonr\"><FontAwesomeIcon icon={faTrash} /></button>\n                            </div>\n                          \n                            </div>\n                         ))}\n          </div>\n          </div>\n        </div>\n\n)\n}\n\n       */\n"]},"metadata":{},"sourceType":"module"}